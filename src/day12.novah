module day12

import util (readProcessTestData)

input : List (List String)
input =
  readProcessTestData 12 "\n" (String.split "-")

#[noWarn]
findPaths
  : List String
  -> (List String -> String -> Boolean)
  -> String
  -> List (List String)
findPaths acc allow path =
  let newacc = acc += path
  if path == "end" then
    [newacc]
  else
    let filter from to = from == path && allow newacc to
    let follows1 =
      List.filter (\[from, to] -> filter from to) input |> List.map (\[_, it] -> it)
    let follows2 =
      List.filter (\[from, to] -> filter to from) input |> List.map (\[it, _] -> it)
    let follows = follows1 ++ follows2

    List.flatMap (findPaths newacc allow) follows

pub
part1 : Unit -> Int
part1 _ =
  let allow (acc : List String) value =
    value == "end" || Char#isUpperCase(value ! 0) || value `notIn` acc

  findPaths [] allow "start" |> len

pub
part2 : Unit -> Int
part2 _ =
  let allow acc value =
    let lowers =
      List.filter (\v -> v != "start" && v != "end" && Char#isLowerCase(v ! 0)) acc
    let dups = len lowers > (Set.fromList lowers |> len)
    let should =
      if dups then value `notIn` acc else (List.filter (_ == value) acc |> len) < 2
    value != "start" && (Char#isUpperCase(value ! 0) || value == "end" || should)

  findPaths [] allow "start" |> len