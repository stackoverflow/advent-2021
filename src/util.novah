module util

pub
readTestData : Int -> String
readTestData day =
  let file = format "./resources/day%s.txt" [toString day]
  IO.readText (IO.newFile file)

pub
readProcessTestData : Int -> String -> (String -> a) -> List a
readProcessTestData day regex mapper =
  readTestData day
    |> String.split regex
    |> List.map mapper

pub
getUnsafe : k -> Map k v -> v
getUnsafe k map =
  Map.get k map |> Option.unwrap

pub
addAll : List a -> List a -> Unit
addAll list toAdd =
  List.forEach toAdd \e ->
    addLast e list
    ()

pub
at : String -> Int -> Char
at = flip String.charAt

pub
isIn : {{ Equals a }} -> a -> List a -> Boolean
isIn = List.contains

pub
min : {{ NumberOps a }} -> List a -> a
min {{_}} list = List.min list |> Option.unwrap

pub
max : {{ NumberOps a }} -> List a -> a
max {{_}} list = List.max list |> Option.unwrap

pub
linear : List a -> List a
linear (list : List a) = list#linear()

pub
forked : List a -> List a
forked (list : List a) = list#forked()

pub
toInt2 : String -> Int64
toInt2 = String.toInt64Radix 2

pub
zeroPad : Int -> String -> String
zeroPad amount str =
  if String.size str >= amount then str
  else zeroPad amount ("0" ++ str)