module util

pub
readTestData : Int -> String
readTestData day =
  let file = format "./resources/day%s.txt" [toString day]
  IO.readText (IO.newFile file)

pub
readProcessTestData : Int -> String -> (String -> a) -> List a
readProcessTestData day regex mapper =
  readTestData day
    |> String.split regex
    |> List.map mapper

pub
addAll : List a -> List a -> Unit
addAll list toAdd =
  List.forEach toAdd \e ->
    addLast e list
    ()

pub
min : {{ NumberOps a }} -> List a -> a
min {{_}} list = (List.min list)!!

pub
max : {{ NumberOps a }} -> List a -> a
max {{_}} list = (List.max list)!!

pub
linear : List a -> List a
linear list = list#linear()

pub
forked : List a -> List a
forked list = list#forked()

pub
toInt2 : String -> Int32
toInt2 = Int32#parseInt(_, 2)

pub
zeroPad : Int -> String -> String
zeroPad amount str =
  if len str >= amount then
    str
  else
    zeroPad amount ("0" ++ str)