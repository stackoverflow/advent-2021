module day6

import util as U

data : List Int64
data =
  U.readProcessTestData 6 "\\n" (String.split ",")
    |> _ ! 0
    |> List.map Int64#parseLong(_)

simulate : Int -> Int64
simulate days =
  let run daysleft list =
    case daysleft of
      0 -> list
      _ ->
        let newFishes = List.find (\(Tuple day _) -> day == 0L) list |> Option.unwrap |> snd
        let process (Tuple day fishes) =
          case day - 1L of
            6L -> 6L <> fishes + newFishes + 0L
            -1L -> 8L <> fishes
            x -> x <> fishes
        
        List.map process list |> run (daysleft - 1)
  
  let ndata = (Map.new [0L <> 0L, 1L <> 0L, 2L <> 0L, 3L <> 0L, 4L <> 0L, 5L <> 0L, 6L <> 0L, 7L <> 0L, 8L <> 0L])#linear()
  List.forEach data \day ->
    Map.update day (_ + 1L) ndata
  let toProcess = Map.toList ndata#forked()
  run days toProcess
    |> List.foldl (\total (Tuple _ n) -> n + total) 0L

pub
day6part1 : Unit -> Int64
day6part1 _ = simulate 80

pub
day6part2 : Unit -> Int64
day6part2 _ = simulate 256