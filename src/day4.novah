module day4

import util (readTestData)

typealias Game = { boards : List (List (List Int)), numbers : List Int, pos : Int }

parseLines : List String -> Game
parseLines lines =
  let parseBoardLine =
    String.strip >> String.split "\\s+" >> List.map int
  let parseBoard line =
    let rows = line |> String.lines |> List.map parseBoardLine
    let length = List.size rows.[0]
    let cols = [0 ... length] |> List.map (\i -> List.map (_ ! i) rows)
    rows ++ cols
  
  { numbers: lines.[0] |> String.split "," |> List.map int
  , boards: List.drop 1 lines |> List.map parseBoard
  , pos: 1
  }

data : Game
data = readTestData 4 |> String.split "\n\n" |> parseLines

won : List Int -> Int -> List (List Int) -> Boolean
won numbers pos board =
  let nums = List.take pos numbers |> Set.fromList
  let filled rowcol = Set.containsAll rowcol nums
  List.any filled board

calculateScore : { pos : Int, numbers : List Int, winner : List (List Int) | r } -> Int
calculateScore game =
  let nums = List.take game.pos game.numbers |> Set.fromList
  List.flatten game.winner
    |> List.remove (\x -> Set.contains x nums)
    |> Set.fromList
    |> Set.foldl (+) 0
    |> _ * (game.numbers.[game.pos - 1])

pub
part1 : Unit -> Int
part1 _ =
  let check game =
    case List.find (won game.numbers game.pos) game.boards of
      Some win -> { winner: win | game }
      None -> check { .pos -> _ + 1 | game }
  
  check data |> calculateScore

pub
part2 : Unit -> Int
part2 _ =
  let check game =
    case List.remove (won game.numbers game.pos) game.boards of
      [] -> { winner: game.boards.[0] | game }
      boards -> game |> { .pos -> _ + 1 | _ } |> { .boards = boards | _ } |> check
  
  check data |> calculateScore