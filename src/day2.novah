module day2

import util (readProcessTestData)

toCoord : String -> { d : Int, h : Int }
toCoord str =
  let match = Re.find #"(\w+) (\d+)" str
  let amount = int match.[2]
  case match.[1] of
    "forward" -> { h: amount, d: 0 }
    "up" -> { h: 0, d: amount * -1 }
    _ -> { h: 0, d: amount }

data : List { d : Int, h : Int }
data = readProcessTestData 2 "\n" toCoord

pub
part1 : Unit -> Int
part1 _ =
  let go {h: acch, d: accd} {h, d} =
    { h: acch + (h : Int)
    , d: accd + (d : Int)
    }
  let {h, d} = List.foldl go { h: 0, d: 0 } data
  h * d

pub
part2 : Unit -> Int
part2 _ =
  let go {h: acch, d: accd, a: acca} {h, d, a} =
    { h: (acch : Int) + h
    , d: accd + h * acca
    , a: acca + d
    }
  let newdata = List.map (\d -> { a: 0 | d }) data
  let {h, d} = List.foldl go { h: 0, d: 0, a: 0 } newdata
  h * d